// Auto-generated from age.html.
// DO NOT EDIT.

library intlx_age;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:async';
import 'package:web_ui/web_ui.dart';
import 'package:intlx/intlx.dart';



      @observable
      class AgeComponent extends WebComponent with Observable  {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("intlx-age");
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("intlx-age");
    __t = new autogenerated.Template(__root);
    if (__root is autogenerated.ShadowRoot) __root.applyAuthorStyles = true;
    var __binding1 = __t.contentBind(() => age, false);
    __root.nodes.addAll([new autogenerated.Text('\n      '),
        __binding1,
        new autogenerated.Text('\n    ')]);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = null;
  }

  /** Original code from the component. */

        static final _defaultAgeFormat = new AgeFormat(rounder: new DurationRounder.staticUnit(TimeUnit.SECOND));
        
        Age() {
          new Stream.periodic(const Duration(seconds: 1), (_) => _dummyChange++).listen(print);
        }
        dynamic __$_dummyChange = 0;
        dynamic get _dummyChange {
          if (__observe.observeReads) {
            __observe.notifyRead(this, __observe.ChangeRecord.FIELD, '_dummyChange');
          }
          return __$_dummyChange;
        }
        set _dummyChange(dynamic value) {
          if (__observe.hasObservers(this)) {
            __observe.notifyChange(this, __observe.ChangeRecord.FIELD, '_dummyChange',
                __$_dummyChange, value);
          }
          __$_dummyChange = value;
        }
        DateTime __$of;
        DateTime get of {
          if (__observe.observeReads) {
            __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'of');
          }
          return __$of;
        }
        set of(DateTime value) {
          if (__observe.hasObservers(this)) {
            __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'of',
                __$of, value);
          }
          __$of = value;
        }
        AgeFormat __$ageFormat = _defaultAgeFormat;
        AgeFormat get ageFormat {
          if (__observe.observeReads) {
            __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'ageFormat');
          }
          return __$ageFormat;
        }
        set ageFormat(AgeFormat value) {
          if (__observe.hasObservers(this)) {
            __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'ageFormat',
                __$ageFormat, value);
          }
          __$ageFormat = value;
        }

        String get age {
          print(_dummyChange);
          return ageFormat.format(of);
        }
      }
    
//@ sourceMappingURL=age.html.dart.map