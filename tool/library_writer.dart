// Copyright (c) 2013, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

library library_writer;

import 'dart:io';
import 'dart:json' as json;
import 'dart:async';
import 'package_paths.dart';

abstract class LibraryWriter {
  Map<String, Map> localeDataMap;
  List<String> localeList;
  String get type;
  String get symbolsClass;
  String get symbolsClassLibrary => '${type}_symbols';

  Future getBuiltLocaleData() {
    var dataDirectory = new Directory.fromPath(getLocaleDataPath(type));
    return dataDirectory.list().fold({}, (localeDataMap, fse) {
      String locale = new Path(fse.path).filenameWithoutExtension;
  
      var filePath = getLocaleDataFilePath(type, locale);
      var file = new File.fromPath(filePath);
      String fileJson = file.readAsStringSync();
      localeDataMap[locale] = json.parse(fileJson);
      return localeDataMap;
    });
  }

  Future writeLibraries() {
    getBuiltLocaleData().then((localeDataMap) {
      this.localeDataMap = localeDataMap;
      localeList = new List.from(localeDataMap.keys)..sort();
      writeLibrariesSync();
    });
  }

  void writeLibrariesSync(){
    writeSymbolLibraries();
    writeLocaleLibraries();
  }

  void writeLocaleLibraries() {
    for(String locale in localeList) {
      writeSingleLocaleLibrary(locale);
    }
    writeAllLocaleLibrary();
    writeLocaleListLibrary();
  }

  void writeSymbolLibraries() {
    for(String locale in localeList) {
      writeSymbolLibrary(locale, localeDataMap[locale]);
    }
  }

  void writeSymbolLibrary(String locale, Map data) {
    writeLibrary(
      getLocaleSrcPath(type), 
      locale, 
      getLibraryComment(true), 
      getSymbolLibraryCode(locale, data), 
      getSymbolsLibraryIdentifier(locale));
  }

  String getSymbolLibraryCode(String locale, Map data) => '''
${getSymbolsClassLibraryImport()}

final symbols = new $symbolsClass(${getSymbolsConstructorArgs(locale, data)});
''';

  String getSymbolsConstructorArgs(String locale, Map data);

  String getSymbolsLibraryIdentifier(String locale) => 
    "${type}_symbols_$locale";

  void writeSingleLocaleLibrary(String locale) {
    var symbolsLibraryId = getSymbolsLibraryIdentifier(locale);
    writeLocaleLibrary(
        locale,
        generateLocaleImport(locale),
        "$symbolsClass.map['$locale'] = $symbolsLibraryId.symbols;");
  }

  void writeAllLocaleLibrary() {
    writeLocaleLibrary(
      "all", 
      getAllLocaleLibraryImports(), 
      getAllLocaleLibraryLogic());
  }
  String getAllLocaleLibraryImports() => 
    localeList.map(generateLocaleImport).toList().join("\n");

  String getAllLocaleLibraryLogic() {
    var mapContents = localeList.map((String locale) => 
      '"$locale": ${getSymbolsLibraryIdentifier(locale)}.symbols').join(", ");
    return '''
      var symbolsMap = <String, $symbolsClass> {$mapContents};
      symbolsMap.forEach((String locale, $symbolsClass symbols) => 
        $symbolsClass.map[locale] = symbols);''';
  }

  String generateLocaleImport(String locale) {
    var symbolsLibraryId = getSymbolsLibraryIdentifier(locale);
    return "import 'package:$packageName/src/$type/locale/$locale.dart' as $symbolsLibraryId;";
  }

  String getSymbolsClassLibraryImport() => 
    "import 'package:$packageName/src/$type/$symbolsClassLibrary.dart';";

  void writeLocaleListLibrary() {
    String localeListString = json.stringify(localeList);

    var code = '''
const ${type}Locales = const <String> $localeListString;
  ''';

    writeLibrary(
      libPath.append("src/$type/"), 
      "${type}_locale_list", 
      getLibraryComment(false), 
      code);
  }

  void writeLocaleLibrary(String locale, String imports, String logic) {
    String code = '''
${getSymbolsClassLibraryImport()}
$imports

void init() {
  $logic
}
  ''';

    writeLibrary(
      localeLibPath.append("$type/"), 
      locale, 
      getLibraryComment(false), 
      code, 
      "${type}_locale_$locale");
  }

  writeLibrary(
    Path path, 
    String name, 
    String comment, 
    String code, 
    [String identifier]) {

    if(identifier == null) identifier = name;
    String fullCode = '''
$comment

library $identifier;

$code''';
    var targetFile = new File.fromPath(path.append("$name.dart"));
    targetFile.writeAsStringSync(fullCode);
  }

  String getLibraryComment(bool containsSymbols) {
    var comment = '''
// Copyright (c) 2013, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

/// DO NOT EDIT. This file is autogenerated by script, see
/// "<this package>/tool/$type/code_build.dart"''';
    
    if(containsSymbols) {
      comment += '''
/// 
/// Before checkin, this file could have been manually edited. This is
/// to incorporate changes before we could correct CLDR. All manual
/// modification must be documented in this section, and should be
/// removed after those changes land to CLDR.''';
    }
    return comment;
  }
  
}
