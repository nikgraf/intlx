

library library_writer;

import 'dart:io';
import 'dart:uri';
import 'dart:utf';
import 'dart:json' as json;
import 'dart:async';
import 'package_paths.dart';

abstract class LibraryWriter {
  Map<String, Map> localeDataMap;
  List<String> localeList;
  String get type;
  String get symbolsClass;
  String get symbolsClassLibrary;

  Future getBuiltLocaleData();

  Future writeLibraries() {
    getBuiltLocaleData().then((localeDataMap) {
      this.localeDataMap = localeDataMap;
      localeList = new List.from(localeDataMap.keys)..sort();
      writeLibrariesSync();
    });
  }

  void writeLibrariesSync(){
    writeSymbolLibraries();
    writeLocaleLibraries();
  }

  void writeLocaleLibraries() {
    for(String locale in localeList) {
      writeSingleLocaleLibrary(locale);
    }
    writeAllLocaleLibrary();
    writeLocaleListLibrary();
  }

  void writeSymbolLibraries() {
    for(String locale in localeList) {
      writeSymbolLibrary(locale, localeDataMap[locale]);
    }
  }

  void writeSymbolLibrary(String locale, Map data) {
    writeLibrary(localeSrcPath, locale, getSymbolLibraryCode(locale, data), getSymbolsLibraryIdentifier(locale));
  }

  String getSymbolLibraryCode(String locale, Map data) => '''
${getSymbolsClassLibraryImport()}

final symbols = new $symbolsClass(${getSymbolsConstructorArgs(locale, data)});
''';

  String getSymbolsConstructorArgs(String locale, Map data);

  String getSymbolsLibraryIdentifier(String locale) => "${type}_symbols_$locale";

  void writeSingleLocaleLibrary(String locale) {
    writeLocaleLibrary(
        locale,
        generateLocaleImport(locale),
        "$symbolsClass.map['$locale'] = ${getSymbolsLibraryIdentifier(locale)}.symbols;");
  }

  void writeAllLocaleLibrary() {
    writeLocaleLibrary("all", getAllLocaleLibraryImports(), getAllLocaleLibraryLogic());
  }
  String getAllLocaleLibraryImports() => localeList.map(generateLocaleImport).toList().join("\n");

  String getAllLocaleLibraryLogic() {
    var mapContents = localeList.map((String locale) => '"$locale": ${getSymbolsLibraryIdentifier(locale)}.symbols').join(", ");
    return '''
      var symbolsMap = <String, $symbolsClass> {$mapContents};
      symbolsMap.forEach((String locale, $symbolsClass symbols) => $symbolsClass.map[locale] = symbols);''';
  }

  String generateLocaleImport(String locale) => "import 'package:intlx/src/$type/locale/$locale.dart' as ${getSymbolsLibraryIdentifier(locale)};";

  String getSymbolsClassLibraryImport() => "import 'package:intlx/src/$type/$symbolsClassLibrary.dart';";

  void writeLocaleListLibrary() {
    String localeListString = json.stringify(localeList);

    var code = '''
  const ${type}Locales = const <String> $localeListString;
  ''';

    writeLibrary(libPath.append("src/$type/"), "${type}_locale_list", code);
  }

  void writeLocaleLibrary(String locale, String imports, String logic) {
    String code = '''
  ${getSymbolsClassLibraryImport()}
  $imports

  void init() {
  $logic
  }
  ''';

    writeLibrary(localeLibPath.append("$type/"), locale, code, "${type}_locale_$locale");
  }

  writeLibrary(Path path, String name, String code, [String identifier]) {
    if(identifier == null) identifier = name;
    String fullCode = '''
$generatedFileWarning

library $identifier;

$code''';
    var targetFile = new File.fromPath(path.append("$name.dart"));
    targetFile.writeAsStringSync(fullCode);
  }

  String get generatedFileWarning => '''
/// DO NOT EDIT. This file is autogenerated by script.
/// See "<this package>/tool/$type/code_build.dart"''';

  Path _localeSrcPath;
  Path get localeSrcPath {
    if(_localeSrcPath == null) {
      _localeSrcPath = libPath.append("src/$type/locale/");
    }
    return _localeSrcPath;
  }

  Path _localeDataPath;
  Path get localeDataPath {
    if(_localeDataPath == null) {
      _localeDataPath = libPath.append("src/data/$type");
    }
    return _localeDataPath;
  }

}

abstract class JsonSourcedLibraryWriter extends LibraryWriter {

  String get symbolsClassLibrary => '${type}_symbols';
  Path get dataPath => localeDataPath.append(type);

  Future getBuiltLocaleData() => new Directory.fromPath(dataPath).list().fold(<String, Map> {}, (Map<String, Map> localeDataMap, FileSystemEntity fse) {
    String locale = new Path(fse.path).filenameWithoutExtension;

    var filePath = dataPath.append("$locale.json");
    var file = new File.fromPath(filePath);
    String fileJson = file.readAsStringSync();
    localeDataMap[locale] = json.parse(fileJson);
    return localeDataMap;
  });

}
