
library util;

import 'dart:io';
import 'dart:uri';
import 'dart:utf';
import 'dart:json';
import 'package:http/http.dart';
import 'locale_data.dart';

String readFile(filePath) {
  var file = new File.fromPath(filePath);
  return file.readAsStringSync();
}

void writeFile(Path path, String content) {
  var targetFile = new File.fromPath(path);
  targetFile.createSync();
  var raf = targetFile.openSync(FileMode.WRITE);
  raf.truncateSync(0);
  raf.writeStringSync(content);
  raf.flushSync();
  raf.close();
}

writeLibrary(Path path, String name, String code, [String identifier]) {
  if(identifier == null) identifier = name;
  String fullCode = '''
$generatedFileWarning

library $identifier;

$code''';
  writeFile(path.append("$name.dart"), fullCode);
}

Future<String> fetchUri(String uri) {
  var completer = new Completer();
  var connection = new HttpClient().getUrl(new Uri(uri));
  connection.onResponse = (HttpClientResponse response) {
    // var input = new StringInputStream(response.inputStream, Encoding.UTF_8);
    var input = response.inputStream;
    var listInput = new ListInputStream();
    input.onData = () {
      listInput.write(input.read());
    };
    input.onClosed = () {
      var charCodes = utf8ToCodepoints(listInput.read());
      var body = new String.fromCharCodes(charCodes);
      print("body: $body");
      completer.complete(body);
    };
  };
  connection.onError = (var e) {
    print("getUri error: $e");
  };
  return completer.future;
}

void writeLocaleJson(String type, String outputPath, String transformJson(String locale, String json)) {
  getLocaleData(type, baseLocales).then((localeJsonMap) => writeLocaleJsonFiles(localeDataPath.append(outputPath), localeJsonMap, transformJson));
}

void writeLocaleJsonFiles(Path path, Map<String, String> localeJsonMap, String transformJson(String locale, String json)) {
  localeJsonMap.forEach((locale, json){
    writeFile(path.append("$locale.json"), transformJson(locale, json));
    print("completed writing json file for $locale");
  });
}

const String generatedFileWarning = '''
/// DO NOT EDIT. This file is autogenerated by script.
/// See "tool/build_locale_libraries.dart"''';

Path _libPath;
Path get libPath {
  if(_libPath == null) {
    var packageRoot = new Path(new Directory.current().path);
    _libPath = packageRoot.append("lib");
  }
  return _libPath;
}

Path _localeLibPath;
Path get localeLibPath {
  if(_localeLibPath == null) {
    _localeLibPath = libPath.append("locale/");
  }
  return _localeLibPath;
}

Path _localeDataPath;
Path get localeDataPath {
  if(_localeDataPath == null) {
    _localeDataPath = libPath.append("src/data/");
  }
  return _localeDataPath;
}

final cldrTag = "unconfirmed";
final cldrUri = "http://i18ndata.appspot.com/cldr/tags/$cldrTag/";
String getCldrDataUri(String locale, String path) => "${cldrUri}main/$locale/$path?depth=-1";

Future getLocaleData(String path, List<String> locales) {

  var dataRequests = <Future<String>> [];
  
  locales.forEach((locale){
    dataRequests.add(fetchUri(getCldrDataUri(locale, path)));
  });

  var dataRequestsFuture = Futures.wait(dataRequests);

  return dataRequestsFuture.transform((List<String> unitsBodies) {

    var localeDataMap = new Map<String, String>();

    for(int i = 0; i < unitsBodies.length; i++) {
      localeDataMap[locales[i]] = unitsBodies[i];
    }
    print("localeDataMap: $localeDataMap");
    print("locale count: ${baseLocales.length}");    
    print("localeDataMap length: ${localeDataMap.length}");
    return localeDataMap;
  });
}

Future getBuiltLocaleData(String jsonPath) {
    var localeDataMap = new Map<String, Map>();
    var completer = new Completer<Map<String, Map>>();

    var lister = new Directory.fromPath(localeDataPath.append(jsonPath)).list();

    lister.onFile = (String file) {
      String locale = new Path.fromNative(file).filenameWithoutExtension;

      var filePath = localeDataPath.append("$locale.json");
      String json = readFile(filePath);
      print("json: $json");
      localeDataMap[locale] = JSON.parse(json);
    };

    lister.onDone = (completed) {
      if(completed) {
        completer.complete(localeDataMap);
      }
    };

    return completer.future;
}


